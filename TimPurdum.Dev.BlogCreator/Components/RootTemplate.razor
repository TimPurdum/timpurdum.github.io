@using System.Reflection
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@Title</title>
    <meta name="generator" content="TimPurdum.Dev Blazor Site Generator" />
    <meta property="og:title" content="@Title" />
    <meta property="og:locale" content="en_US" />
    <meta name="description" content="@Description" />
    <meta property="og:description" content="@Description" />
    <link rel="canonical" href="@Url" />
    <meta property="og:url" content="@Url" />
    <meta property="og:site_name" content="@SiteName" />
    <meta property="og:type" content="website" />
    <base href="/" />
    <link rel="stylesheet" href="css/app.css" />
    <link href="@($"{SiteName}.styles.css")" rel="stylesheet" />
    @HeaderLinks
</head>

<body>
    <DynamicComponent Type="_layoutType" Parameters="_parameters" />
    <script src="_framework/blazor.webassembly.js"></script>
    @foreach (MarkupString script in Scripts ?? [])
    {
        @script
    }
</body>

</html>



@code {
    [Parameter]
    public required string Layout { get; set; }
    
    [Parameter]
    public required MarkupString Title { get; set; }
    
    [Parameter]
    public MarkupString? SubTitle { get; set; }
    
    [Parameter]
    public MarkupString? Description { get; set; }
    
    [Parameter]
    public required MarkupString Content { get; set; }
    
    [Parameter]
    public string? Author { get; set; }
    
    [Parameter]
    public DateTime? PublishedDate { get; set; }
    
    [Parameter]
    public string? Url { get; set; }
    
    [Parameter]
    public string? SiteName { get; set; }
    
    [Parameter]
    public MarkupString? HeaderLinks { get; set; }
    
    [Parameter]
    public List<LinkData>? NavLinks { get; set; }
    
    [Parameter]
    public List<MarkupString>? Scripts { get; set; }

    protected override void OnParametersSet()
    {
        _layoutType = GetType().Assembly.GetTypes()
                          .Where(t => t.IsSubclassOf(typeof(ComponentBase)))
                          .FirstOrDefault(t => string.Equals(t.Name, Layout, StringComparison.OrdinalIgnoreCase))
                      ?? typeof(PostLayout);
        _parameters = new Dictionary<string, object?>
        {
            { nameof(Title), Title },
            { nameof(SubTitle), SubTitle }, 
            { nameof(PublishedDate), PublishedDate },
            { nameof(Content), Content },
            { nameof(Author), Author },
            { nameof(Url), Url },
            { nameof(SiteName), SiteName },
            { nameof(Description), Description },
            { nameof(NavLinks), NavLinks }
        };
        
        PropertyInfo[] properties = _layoutType.GetProperties(BindingFlags.Public | BindingFlags.Instance);
        
        foreach (KeyValuePair<string, object?> parameter in _parameters.ToList())
        {
            if (!properties.Any(p => p.Name.Equals(parameter.Key, StringComparison.OrdinalIgnoreCase)))
            {
                _parameters.Remove(parameter.Key);
            }
        }
    }

    private Type? _layoutType;
    private Dictionary<string, object?>? _parameters;
}