<div id="control-set">
    <div class="form-group">
        <label>Locator: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(LocateWidget)))"></label>
    </div>
    <div class="form-group">
        <label>Search: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(SearchWidget)))"></label>
    </div>
    <div class="form-group">
        <label>Basemap Toggle: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(BasemapToggleWidget)))"></label>
    </div>
    <div class="form-group">
        <label>Basemap Gallery: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(BasemapGalleryWidget)))"></label>
    </div>
    <div class="form-group">
        <label>Legend: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(LegendWidget)))"></label>
    </div>
    <div class="form-group">
        <label>Scale Bar: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(ScaleBarWidget)))"></label>
    </div>
    <div class="form-group">
        <label>Home: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(HomeWidget)))"></label>
    </div>
    <div class="form-group">
        <label>Compass: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(CompassWidget)))"></label>
    </div>
    <div class="form-group">
        <label>Bookmarks: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(BookmarksWidget)))"></label>
    </div>
    <div class="form-group">
        <label>Measurement: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(MeasurementWidget)))"></label>
    </div>
    <div class="form-group">
        <label>Editor: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(EditorWidget)))"></label>
    </div>
    <div class="form-group">
        <label>Sketch: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(SketchWidget)))"></label>
    </div>
    <div class="form-group">
        <label>Track: <input type="checkbox" class="form-check-input" @onchange="@(() => ToggleWidget(nameof(TrackWidget)))"></label>
    </div>
</div>

<div id="gallery-box"></div>

<MapView Longitude="-40" Latitude="28" Zoom="2" style="height: 600px; width: 100%">
    <Map>
        <Basemap>
            <BasemapStyle Name="BasemapStyleName.ArcgisNavigation" />
        </Basemap>
        <GraphicsLayer @ref="_graphicsLayer" />
        @if (_showEditor)
        {
            <FeatureLayer Url="https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/my_points/FeatureServer/0" />
        }
    </Map>
    @if (_showLocate)
    {
        <LocateWidget Scale="1500" 
                      Position="OverlayPosition.TopLeft" />
    }
    @if (_showSearch)
    {
        <SearchWidget Position="OverlayPosition.TopRight" />
    }
    @if (_showBasemapToggle)
    {
        <BasemapToggleWidget NextBasemapStyle="BasemapStyleName.ArcgisImagery" 
                             Position="OverlayPosition.BottomRight" />
    }
    @if (_showBasemapGallery)
    {
        <BasemapGalleryWidget ContainerId="gallery-box" />
    }
    @if (_showScaleBar)
    {
        <ScaleBarWidget Position="OverlayPosition.BottomLeft" />
    }
    @if (_showLegend)
    {
        <LegendWidget Position="OverlayPosition.TopRight" />
    }
    @if (_showHome)
    {
        <HomeWidget Position="OverlayPosition.TopLeft" />
    }
    @if (_showCompass)
    {
        <CompassWidget Position="OverlayPosition.TopLeft" />
    }
    @if (_showEditor)
    {
        <EditorWidget Position="OverlayPosition.TopRight" />
    }
    @if (_showSketch)
    {
        <SketchWidget GraphicsLayerId="@_graphicsLayer!.Id" Position="OverlayPosition.TopRight" />
    }
    @if (_showTrack)
    {
        <TrackWidget Position="OverlayPosition.TopLeft" />
    }
    @if (_showMeasurement)
    {
        <MeasurementWidget ActiveTool="ActiveTool.Distance" Label="Measure" 
                           LinearUnit="SystemOrLengthUnit.NauticalMiles" 
                           AreaUnit="SystemOrAreaUnit.SquareInches" Position="OverlayPosition.TopLeft" />
    }
    @if (_showBookmarks)
    {
        <BookmarksWidget Position="OverlayPosition.TopRight" @ref="_bookmarkWidget" DragEnabled="true">
            <BookmarksVisibleElements EditBookmarkButton="true" AddBookmarkButton="true" />
        </BookmarksWidget>
    }
</MapView>

@code {
[Inject]    
public required NavigationManager NavigationManager { get; set; }

    private async Task ToggleWidget(string widgetTypeName)
    {
        switch (widgetTypeName)
        {
            case nameof(LocateWidget):
                _showLocate = !_showLocate;
                break;
            case nameof(SearchWidget):
                _showSearch = !_showSearch;
                break;
            case nameof(BasemapToggleWidget):
                _showBasemapToggle = !_showBasemapToggle;
                break;
            case nameof(BasemapGalleryWidget):
                _showBasemapGallery = !_showBasemapGallery;
                break;
            case nameof(LegendWidget):
                _showLegend = !_showLegend;
                break;
            case nameof(ScaleBarWidget):
                _showScaleBar = !_showScaleBar;
                break;
            case nameof(HomeWidget):
                _showHome = !_showHome;
                break;
            case nameof(CompassWidget):
                _showCompass = !_showCompass;
                break;
            case nameof(EditorWidget):
                _showEditor = !_showEditor;
                break;
            case nameof(SketchWidget):
                _showSketch = !_showSketch;
                break;
            case nameof(TrackWidget):
                _showTrack = !_showTrack;
                break;
            case nameof(MeasurementWidget):
                _showMeasurement = !_showMeasurement;
                break;
            case nameof(BookmarksWidget):
                _showBookmarks = !_showBookmarks;

                if (_showBookmarks)
                {
                    while (_bookmarkWidget is null)
                    {
                        await Task.Delay(100);
                    }
                    
                    await Task.Delay(500);
                    
                    await InvokeAsync(async () =>
                    {
                        await _bookmarkWidget!.SetBookmarks(_bookmarks);
                        StateHasChanged();
                    });
                }
                break;
        }
    }

    private readonly List<Bookmark> _bookmarks =
    [
        new Bookmark("Angeles National Forest",
            thumbnail: new BookmarkThumbnail("/_content/dymaptic.GeoBlazor.Core.Sample.Shared/images/Blazor-API-60px.png"),
            viewpoint: new Viewpoint(new Extent(-13092887.54677721, -13139131.948889678,
                4090610.189673263, 4047767.23531948, spatialReference: new SpatialReference(102100)))),

        new Bookmark("Crystal Lake",
            viewpoint: new Viewpoint(new Extent(-13114291.451169826, -13125852.551697943,
                4077614.8487296384, 4066904.1101411926, spatialReference: new SpatialReference(102100)))),

        new Bookmark("Mt. Waterman",
            viewpoint: new Viewpoint(new Extent(-13183855.195875114, -13185668.186639601,
                4067515.260976006, 4066176.418652561, spatialReference: new SpatialReference(102100))))
    ];

    private bool _showSearch;
    private bool _showLocate;
    private bool _showBasemapToggle;
    private bool _showBasemapGallery;
    private bool _showScaleBar;
    private bool _showLegend;
    private bool _showHome;
    private bool _showCompass;
    private bool _showEditor;
    private bool _showSketch;
    private bool _showTrack;
    private bool _showMeasurement;
    private bool _showBookmarks;
    private GraphicsLayer? _graphicsLayer;

    private BookmarksWidget? _bookmarkWidget;

}
