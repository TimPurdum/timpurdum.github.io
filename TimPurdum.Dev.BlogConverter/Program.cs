using System.Diagnostics;
using System.Text;
using TimPurdum.Dev.BlogConverter;

StringBuilder linksBuilder = new(
    """
    // This file is auto-generated by the Markup Converter.
    
    namespace TimPurdum.Dev;
    
    public record LinkData(string Title, string SubTitle, string Url, DateTime PublishedDate, string Author);
    
    public static class NavigationLinks
    {
        public static readonly List<LinkData> Posts = 
        [
    """);

Directories.Initialize(args[0]);

// Load templates from the Templates directory
Dictionary<string, string> templates = new Dictionary<string, string>();
foreach (string templateFile in Directory.GetFiles(Directories.Templates, "*.razor"))
{
    string templateName = Path.GetFileName(templateFile);
    templates[templateName] = File.ReadAllText(templateFile);
}

// Load posts from the Content/Posts directory
string[] posts = Directory.GetFiles(Directories.ContentPosts, "*.md", SearchOption.AllDirectories);

foreach (string post in posts)
{
    string fileName = Path.GetFileNameWithoutExtension(post);
    if (Resources.PostNameRegex.Match(fileName) is not { Success: true } match)
    {
        Console.WriteLine($"Skipping post {fileName} due to invalid name format.");
        continue; // Skip posts with invalid names
    }
    fileName = match.Groups["fileName"].Value;
    DateTime publishedDate = new DateTime(
        int.Parse(match.Groups[1].Value),
        int.Parse(match.Groups[2].Value),
        int.Parse(match.Groups[3].Value));
    string content = File.ReadAllText(post);

    try
    {
        PostMetaData? postMetaData = FileConverter.GeneratePost(fileName, content, publishedDate, templates);
        if (postMetaData is not null)
        {
            Console.WriteLine($"Generated Razor content for post: {fileName}");
            string outFileName = KebabCaseToPascalCase(fileName);
            string outputFilePath = Path.Combine(Directories.OutputPosts, $"{outFileName}.razor");
            string razorContent = postMetaData.Content;
            File.WriteAllText(outputFilePath, razorContent);
            linksBuilder.AppendLine(
                $"""
                         new LinkData("{postMetaData.Title}", "{postMetaData.SubTitle}", "{postMetaData.Url}",
                            new DateTime({postMetaData.PublishedDate.Year}, {postMetaData.PublishedDate.Month}, {postMetaData.PublishedDate.Day}),
                            "{postMetaData.Author}"),
                 """);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error generating Razor content for post {fileName}: {ex.Message}");
    }
}

// Close the list of posts in the generated code
linksBuilder.AppendLine(
    """
        ];
        
        public static readonly List<LinkData> Pages = [];
    }
    """);

// Write the generated links to a file
string linksFilePath = Path.Combine(Directories.Project, "NavigationLinks.cs");
File.WriteAllText(linksFilePath, linksBuilder.ToString());

    
string KebabCaseToPascalCase(string str)
{
    if (string.IsNullOrEmpty(str))
    {
        return str;
    }

    ReadOnlySpan<char> input = str;
    var result = new System.Text.StringBuilder(str.Length);

    bool capitalize = true;
    for (int i = 0; i < input.Length; i++)
    {
        char c = input[i];
        if (c == '-')
        {
            capitalize = true;
        }
        else
        {
            if (capitalize)
            {
                result.Append(char.ToUpperInvariant(c));
                capitalize = false;
            }
            else
            {
                result.Append(char.ToLowerInvariant(c));
            }
        }
    }

    return result.ToString();
}

public record PostMetaData(string Title, string SubTitle, string Url, DateTime PublishedDate, string Author, string Content);